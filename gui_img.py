# gui_img.py

import tkinter as tk
from tkinter import ttk, filedialog, messagebox
from PIL import Image, ImageTk
# Gi·∫£ s·ª≠ file insert_img.py ch·ª©a 2 h√†m n√†y v√† n·∫±m c√πng th∆∞ m·ª•c
from insert_img import insert_image, batch_insert_image
import os

class ImageInserterApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Ki·ªÉm th·ª≠ Ch√®n ·∫£nh")
        self.root.geometry("1000x700")

        self.image_file_types = [
            ("Image Files", "*.png;*.jpg;*.jpeg;*.bmp;*.gif;*.webp"),
            ("All files", "*.*")
        ]
        self.save_file_types = [
            ("PNG file", "*.png"),
            ("JPEG file", "*.jpg"),
            ("WEBP file", "*.webp")
        ]

        # Bi·∫øn l∆∞u tr·∫°ng th√°i
        self.base_image_path = tk.StringVar()
        self.base_folder_path = tk.StringVar()
        self.overlay_image_path = tk.StringVar()
        # --- TH√äM M·ªöI 1: Bi·∫øn l∆∞u ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c ƒë·∫ßu ra ---
        self.output_folder_path = tk.StringVar(value="output_img")
        self.position = tk.StringVar(value='bottom_right')
        self.resize_percentage = tk.DoubleVar(value=5.0)
        self.proportional_resize = tk.BooleanVar(value=True)
        self.preview_photo_image = None
        self.current_result_image = None

        # --- Giao di·ªán ---
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.pack(fill=tk.BOTH, expand=True)

        # TƒÉng chi·ªÅu r·ªông ƒë·ªÉ c√≥ kh√¥ng gian cho widget m·ªõi
        controls_frame = ttk.Frame(main_frame, width=300)
        controls_frame.pack(side=tk.LEFT, fill=tk.Y, padx=(0, 10))
        controls_frame.pack_propagate(False)

        single_mode_frame = ttk.LabelFrame(controls_frame, text="Ch·∫ø ƒë·ªô x·ª≠ l√Ω ƒë∆°n")
        single_mode_frame.pack(fill=tk.X, pady=5)
        ttk.Button(single_mode_frame, text="1. Ch·ªçn ·∫£nh n·ªÅn", command=self.load_base_image).pack(fill=tk.X, padx=5, pady=5)
        
        base_image_frame = ttk.Frame(single_mode_frame)
        base_image_frame.pack(fill=tk.X, padx=5, pady=(0, 5))
        self.base_path_label = ttk.Label(base_image_frame, text="Ch∆∞a ch·ªçn ·∫£nh", wraplength=250)
        self.base_path_label.pack(side=tk.LEFT, fill=tk.X, expand=True)
        ttk.Button(base_image_frame, text="X", width=2, command=self.clear_base_image_selection).pack(side=tk.RIGHT)

        batch_mode_frame = ttk.LabelFrame(controls_frame, text="Ch·∫ø ƒë·ªô x·ª≠ l√Ω h√†ng lo·∫°t")
        batch_mode_frame.pack(fill=tk.X, pady=10)
        ttk.Button(batch_mode_frame, text="1. Ch·ªçn th∆∞ m·ª•c ·∫£nh n·ªÅn", command=self.load_base_folder).pack(fill=tk.X, padx=5, pady=5)

        base_folder_frame = ttk.Frame(batch_mode_frame)
        base_folder_frame.pack(fill=tk.X, padx=5, pady=(0, 5))
        self.base_folder_label = ttk.Label(base_folder_frame, text="Ch∆∞a ch·ªçn th∆∞ m·ª•c", wraplength=250)
        self.base_folder_label.pack(side=tk.LEFT, fill=tk.X, expand=True)
        ttk.Button(base_folder_frame, text="X", width=2, command=self.clear_base_folder_selection).pack(side=tk.RIGHT)
        
        proportional_check = ttk.Checkbutton(batch_mode_frame, text="T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc theo ·∫£nh g·ªëc", variable=self.proportional_resize)
        proportional_check.pack(padx=5, pady=5, anchor='w')
        
        common_config_frame = ttk.LabelFrame(controls_frame, text="C·∫•u h√¨nh chung")
        common_config_frame.pack(fill=tk.X, pady=5)
        ttk.Button(common_config_frame, text="2. Ch·ªçn ·∫£nh ch√®n", command=self.load_overlay_image).pack(fill=tk.X, padx=5, pady=5)

        overlay_image_frame = ttk.Frame(common_config_frame)
        overlay_image_frame.pack(fill=tk.X, padx=5, pady=(0, 10))
        self.overlay_path_label = ttk.Label(overlay_image_frame, text="Ch∆∞a ch·ªçn ·∫£nh", wraplength=250)
        self.overlay_path_label.pack(side=tk.LEFT, fill=tk.X, expand=True)
        ttk.Button(overlay_image_frame, text="X", width=2, command=self.clear_overlay_image_selection).pack(side=tk.RIGHT)

        ttk.Label(common_config_frame, text="3. Ch·ªçn v·ªã tr√≠:").pack(fill=tk.X, padx=5)
        positions = ['center', 'top_left', 'top_right', 'bottom_left', 'bottom_right', 'center_top', 'center_bottom']
        position_combo = ttk.Combobox(common_config_frame, textvariable=self.position, values=positions, state="readonly")
        position_combo.pack(fill=tk.X, padx=5, pady=(0, 10))
        position_combo.bind("<<ComboboxSelected>>", self.update_preview)

        ttk.Label(common_config_frame, text="4. Thay ƒë·ªïi k√≠ch th∆∞·ªõc (%):").pack(fill=tk.X, padx=5, anchor='w')
        resize_frame = ttk.Frame(common_config_frame)
        resize_frame.pack(fill=tk.X, padx=5, pady=(0, 10))
        resize_spinbox = tk.Spinbox(
            resize_frame, from_=0.0, to=100.0, textvariable=self.resize_percentage,
            width=5, increment=0.1, format="%.1f", command=self.update_preview
        )
        resize_spinbox.pack(side=tk.RIGHT, padx=(5, 0))
        resize_scale = ttk.Scale(
            resize_frame, from_=0.0, to=100.0, orient=tk.HORIZONTAL,
            variable=self.resize_percentage, command=self.update_preview
        )
        resize_scale.pack(side=tk.LEFT, fill=tk.X, expand=True)
        self.resize_percentage.trace_add("write", self.update_preview)

        # --- TH√äM M·ªöI 2: Khung ch·ªçn th∆∞ m·ª•c ƒë·∫ßu ra ---
        output_config_frame = ttk.LabelFrame(controls_frame, text="C·∫•u h√¨nh ƒë·∫ßu ra (h√†ng lo·∫°t)")
        output_config_frame.pack(fill=tk.X, pady=5)

        ttk.Button(output_config_frame, text="5. Ch·ªçn th∆∞ m·ª•c l∆∞u ·∫£nh", command=self.select_output_folder).pack(fill=tk.X, padx=5, pady=5)
        
        output_folder_frame = ttk.Frame(output_config_frame)
        output_folder_frame.pack(fill=tk.X, padx=5, pady=(0, 5))
        self.output_folder_label = ttk.Label(output_folder_frame, text="Th∆∞ m·ª•c m·∫∑c ƒë·ªãnh: output_img", wraplength=250)
        self.output_folder_label.pack(side=tk.LEFT, fill=tk.X, expand=True)
        ttk.Button(output_folder_frame, text="X", width=2, command=self.clear_output_folder_selection).pack(side=tk.RIGHT)
        # --- K·∫æT TH√öC TH√äM M·ªöI ---

        self.style = ttk.Style()
        self.style.configure("Accent.TButton", foreground="blue", background="forest green")

        ttk.Button(controls_frame, text="üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω h√†ng lo·∫°t", command=self.start_batch_processing, style="Accent.TButton").pack(fill=tk.X, pady=(15, 5))
        
        preview_frame = ttk.LabelFrame(main_frame, text="Xem tr∆∞·ªõc")
        preview_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        self.preview_label = ttk.Label(preview_frame, text="\n\nVui l√≤ng ch·ªçn ·∫£nh ƒë·ªÉ xem tr∆∞·ªõc", anchor='center')
        self.preview_label.pack(fill=tk.BOTH, expand=True)

    def clear_preview(self):
        self.preview_label.config(image=None, text="\n\nVui l√≤ng ch·ªçn ·∫£nh ƒë·ªÉ xem tr∆∞·ªõc")
        self.preview_photo_image = None
        self.current_result_image = None

    def clear_base_image_selection(self):
        self.base_image_path.set("")
        self.base_path_label.config(text="Ch∆∞a ch·ªçn ·∫£nh")
        self.clear_preview()
        
    def clear_base_folder_selection(self):
        self.base_folder_path.set("")
        self.base_folder_label.config(text="Ch∆∞a ch·ªçn th∆∞ m·ª•c")
        self.clear_base_image_selection()

    def clear_overlay_image_selection(self):
        self.overlay_image_path.set("")
        self.overlay_path_label.config(text="Ch∆∞a ch·ªçn ·∫£nh")
        self.update_preview() # C·∫≠p nh·∫≠t l·∫°i preview

    # --- TH√äM M·ªöI 3: C√°c h√†m x·ª≠ l√Ω cho th∆∞ m·ª•c ƒë·∫ßu ra ---
    def select_output_folder(self):
        path = filedialog.askdirectory(title="Ch·ªçn th∆∞ m·ª•c ƒë·ªÉ l∆∞u ·∫£nh")
        if path:
            self.output_folder_path.set(path)
            self.output_folder_label.config(text=path)
    
    def clear_output_folder_selection(self):
        default_path = "output_img"
        self.output_folder_path.set(default_path)
        self.output_folder_label.config(text=f"Th∆∞ m·ª•c m·∫∑c ƒë·ªãnh: {default_path}")
    # --- K·∫æT TH√öC TH√äM M·ªöI ---

    def find_first_image_in_folder(self, folder_path):
        valid_extensions = tuple(ext.replace('*', '') for ext in self.image_file_types[0][1].split(';'))
        try:
            for filename in sorted(os.listdir(folder_path)):
                if filename.lower().endswith(valid_extensions):
                    return os.path.join(folder_path, filename)
        except OSError: return None
        return None

    def load_base_image(self):
        path = filedialog.askopenfilename(filetypes=self.image_file_types)
        if path:
            self.base_image_path.set(path)
            self.base_path_label.config(text=os.path.basename(path))
            self.base_folder_path.set("")
            self.base_folder_label.config(text="Ch∆∞a ch·ªçn th∆∞ m·ª•c")
            self.update_preview()

    def load_base_folder(self):
        path = filedialog.askdirectory()
        if path:
            self.base_folder_path.set(path)
            self.base_folder_label.config(text=path)
            first_image_for_preview = self.find_first_image_in_folder(path)
            if first_image_for_preview:
                self.base_image_path.set(first_image_for_preview)
                self.update_preview()
            else:
                self.base_image_path.set("")
                self.clear_preview()
                messagebox.showwarning("Kh√¥ng t√¨m th·∫•y ·∫£nh", "Th∆∞ m·ª•c b·∫°n ch·ªçn kh√¥ng ch·ª©a file ·∫£nh n√†o ƒë∆∞·ª£c h·ªó tr·ª£.")

    def load_overlay_image(self):
        path = filedialog.askopenfilename(filetypes=self.image_file_types)
        if path:
            self.overlay_image_path.set(path)
            self.overlay_path_label.config(text=os.path.basename(path))
            self.update_preview()

    def update_preview(self, *args):
        try:
            current_value = self.resize_percentage.get()
        except (tk.TclError, ValueError): return
        rounded_value = round(current_value, 1)
        if abs(current_value - rounded_value) > 1e-6:
            self.resize_percentage.set(rounded_value)
            return

        base_path = self.base_image_path.get()
        overlay_path = self.overlay_image_path.get()

        if not base_path:
            self.clear_preview()
            return

        result_image = None
        try:
            if overlay_path and os.path.exists(overlay_path):
                 result_image = insert_image(
                    base_image_path=base_path,
                    overlay_image_path=overlay_path,
                    position=self.position.get(),
                    resize_percentage=rounded_value
                )
            else:
                # N·∫øu kh√¥ng c√≥ ·∫£nh ch√®n, ch·ªâ hi·ªÉn th·ªã ·∫£nh n·ªÅn
                result_image = Image.open(base_path)

            if result_image:
                self.current_result_image = result_image
                preview_width = self.preview_label.winfo_width()
                preview_height = self.preview_label.winfo_height()
                if preview_width < 50 or preview_height < 50:
                    preview_width, preview_height = 700, 650
                display_image = result_image.copy()
                display_image.thumbnail((preview_width - 20, preview_height - 20), Image.LANCZOS)
                self.preview_photo_image = ImageTk.PhotoImage(display_image)
                self.preview_label.config(image=self.preview_photo_image, text="")
        except Exception as e:
            print(f"L·ªói khi c·∫≠p nh·∫≠t preview: {e}")
            self.clear_preview()
            self.preview_label.config(text=f"\n\nL·ªói hi·ªÉn th·ªã ·∫£nh:\n{os.path.basename(base_path)}")


    # --- C·∫¨P NH·∫¨T 4: H√†m x·ª≠ l√Ω h√†ng lo·∫°t ---
    def start_batch_processing(self):
        folder_path = self.base_folder_path.get()
        overlay_path = self.overlay_image_path.get()
        if not folder_path or not overlay_path:
            messagebox.showerror("Thi·∫øu th√¥ng tin", "Vui l√≤ng ch·ªçn c·∫£ 'Th∆∞ m·ª•c ·∫£nh n·ªÅn' v√† '·∫¢nh ch√®n' ƒë·ªÉ x·ª≠ l√Ω h√†ng lo·∫°t.")
            return
            
        # L·∫•y ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c ƒë·∫ßu ra t·ª´ bi·∫øn
        output_dir = self.output_folder_path.get()
        if not output_dir:
            output_dir = "output_img" # Fallback n·∫øu r·ªóng

        try:
            preview_path = self.base_image_path.get()
            if self.proportional_resize.get() and (not preview_path or not os.path.exists(preview_path)):
                 preview_path = self.find_first_image_in_folder(folder_path)
                 if not preview_path:
                     messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y ·∫£nh n√†o ƒë·ªÉ l√†m tham chi·∫øu cho vi·ªác resize t·ª∑ l·ªá.")
                     return

            count = batch_insert_image(
                base_folder_path=folder_path,
                overlay_image_path=overlay_path,
                output_folder_path=output_dir, # S·ª≠ d·ª•ng ƒë∆∞·ªùng d·∫´n ƒë√£ ch·ªçn
                position=self.position.get(),
                resize_percentage=self.resize_percentage.get(),
                proportional_resize=self.proportional_resize.get(),
                preview_base_image_path=preview_path
            )
            if count > 0:
                messagebox.showinfo("Ho√†n th√†nh", f"ƒê√£ x·ª≠ l√Ω th√†nh c√¥ng {count} ·∫£nh.\nK·∫øt qu·∫£ ƒë∆∞·ª£c l∆∞u t·∫°i th∆∞ m·ª•c:\n'{os.path.abspath(output_dir)}'.")
            else:
                messagebox.showwarning("Kh√¥ng c√≥ ·∫£nh n√†o ƒë∆∞·ª£c x·ª≠ l√Ω", "Kh√¥ng t√¨m th·∫•y file ·∫£nh h·ª£p l·ªá trong th∆∞ m·ª•c ƒë√£ ch·ªçn ho·∫∑c ƒë√£ c√≥ l·ªói x·∫£y ra.")
        except Exception as e:
            messagebox.showerror("L·ªói x·ª≠ l√Ω h√†ng lo·∫°t", f"ƒê√£ x·∫£y ra l·ªói: {e}")

if __name__ == "__main__":
    root = tk.Tk()
    app = ImageInserterApp(root)
    root.mainloop()